name: continuous-integration
on: [push, pull_request]

jobs:

  Windows:
    runs-on: windows-latest
    permissions:
      checks: write
      pull-requests: write
    env: 
      ALSOFT_CONF: megasource/libs/love/testing/resources/alsoft.conf
      VK_ICD_FILENAMES: ${{ github.workspace }}\mesa\x64\lvp_icd.x86_64.json
      VULKAN_SDK: C:/VulkanSDK/1.3.231.1
    strategy:
      matrix:
        platform: [x64]
    defaults:
      run:
        shell: cmd
    continue-on-error: ${{ matrix.platform == 'ARM64' }}
    steps:
    - name: Define Variables
      id: vars
      run: |
        rem JIT Modules
        if "${{ matrix.platform }}" == "x64" (
          (echo jitmodules=1)>> "%GITHUB_OUTPUT%"
        ) else (
          (echo jitmodules=0)>> "%GITHUB_OUTPUT%"
        )
        
        rem Architecture-Specific Switch
        goto ${{ matrix.platform }}
        exit /b 1
        
        :Win32
        (echo arch=x86)>> "%GITHUB_OUTPUT%"
        (echo angle=0)>> "%GITHUB_OUTPUT%"
        echo nofiles=warn>> "%GITHUB_OUTPUT%"
        exit /b 0
        
        :x64
        (echo arch=x64)>> "%GITHUB_OUTPUT%"
        (echo angle=0)>> "%GITHUB_OUTPUT%"
        echo nofiles=warn>> "%GITHUB_OUTPUT%"
        exit /b 0
        
        :ARM64
        (echo arch=arm64)>> "%GITHUB_OUTPUT%"
        (echo angle=1)>> "%GITHUB_OUTPUT%"
        echo nofiles=ignore>> "%GITHUB_OUTPUT%"
        echo moredef=-DLOVE_EXTRA_DLLS=%CD%\angle\libEGL.dll;%CD%\angle\libGLESv2.dll>> "%GITHUB_OUTPUT%"
        exit /b 0
    - name: Download pdbstr
      run: curl -Lfo pdbstr.nupkg https://www.nuget.org/api/v2/package/Microsoft.Debugging.Tools.PdbStr/20230731.1609.0
    - name: Download srctool
      run: curl -Lfo srctool.nupkg https://www.nuget.org/api/v2/package/Microsoft.Debugging.Tools.SrcTool/20230731.1609.0
    - name: Extract Tools and Add to PATH
      run: |
        mkdir debugtools
        cd debugtools
        if errorlevel 1 exit /b 1
        7z e ..\srctool.nupkg content/amd64/srctool.exe
        if errorlevel 1 exit /b 1
        7z e ..\pdbstr.nupkg content/amd64/pdbstr.exe
        if errorlevel 1 exit /b 1
        echo %CD%>>%GITHUB_PATH%
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    - name: Download source_index.py
      run: curl -Lfo source_index.py https://gist.github.com/MikuAuahDark/d9c099f5714e09a765496471c2827a55/raw/df34956052035f3473c5f01861dfb53930d06843/source_index.py
    - name: Clone Megasource
      uses: actions/checkout@v4
      with:
        path: megasource
        repository: love2d/megasource
        ref: main
    - id: megasource
      name: Get Megasource Commit SHA
      shell: python
      run: |
        import os
        import subprocess
        
        result = subprocess.run("git -C megasource rev-parse HEAD".split(), check=True, capture_output=True, encoding="UTF-8")
        commit = result.stdout.split()[0]
        with open(os.environ["GITHUB_OUTPUT"], "w", encoding="UTF-8") as f: f.write(f"commit={commit}")
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: megasource/libs/love
    - name: Download ANGLE
      uses: robinraju/release-downloader@v1.9
      if: steps.vars.outputs.angle == '1'
      with:
        repository: MikuAuahDark/angle-winbuild
        tag: cr_5249
        fileName: angle-win-${{ steps.vars.outputs.arch }}.zip
        tarBall: false
        zipBall: false
        out-file-path: angle
    - name: Extract ANGLE
      if: steps.vars.outputs.angle == '1'
      working-directory: angle
      run: 7z x angle-win-${{ steps.vars.outputs.arch }}.zip
    - name: Remove Strawbery Perl From Path
      # https://github.com/actions/runner-images/issues/6627
      # In particular, this is not pretty, but even CMAKE_IGNORE_PREFIX_PATH
      # cannot help in this case.
      run: |
        move /y C:\Strawberry C:\Strawberry_not_in_PATH
        exit /b 0
    - name: Configure
      env:
        CFLAGS: /Zi
        CXXFLAGS: /Zi
        LDFLAGS: /DEBUG:FULL /OPT:REF /OPT:ICF
      run: cmake -Bbuild -Smegasource -T v143 -A ${{ matrix.platform }},version=10.0.26100.0 --install-prefix %CD%\install -DCMAKE_PDB_OUTPUT_DIRECTORY=%CD%\pdb ${{ steps.vars.outputs.moredef }}
    - name: Install
      run: cmake --build build --target PACKAGE --config Release -j2
    - name: Copy LuaJIT lua51.pdb
      run: |
        copy /Y build\libs\LuaJIT\src\lua51.pdb pdb\Release\lua51.pdb
        exit /b 0
    - name: Add srcsrv to PATH
      run: |
        echo C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\srcsrv>>%GITHUB_PATH%
    - name: Embed Source Index into PDBs
      run: |
        python source_index.py ^
        --source %CD%\megasource\libs\love https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }} ^
        --source %CD%\megasource https://raw.githubusercontent.com/love2d/megasource/${{ steps.megasource.outputs.commit }} ^
        --source %CD%\build\libs\LuaJIT https://raw.githubusercontent.com/love2d/megasource/${{ steps.megasource.outputs.commit }}/libs/LuaJIT ^
        pdb\Release\*.pdb
    - name: Artifact
      uses: actions/upload-artifact@v4
      with:
        name: love-windows-${{ steps.vars.outputs.arch }}
        path: |
          build/*.zip
          build/*.exe
        if-no-files-found: ${{ steps.vars.outputs.nofiles }}
    - name: Artifact JIT Modules
      if: steps.vars.outputs.jitmodules == '1'
      uses: actions/upload-artifact@v4
      with:
        name: love-windows-jitmodules
        path: build/libs/LuaJIT/src/jit/*.lua
    - name: Artifact PDB
      uses: actions/upload-artifact@v4
      with:
        name: love-windows-${{ steps.vars.outputs.arch }}-dbg
        path: pdb/Release/*.pdb
    # install mesa for graphic tests
    - name: Install Mesa 
      if: steps.vars.outputs.arch != 'ARM64'
      run: |
        curl -L --output mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/24.2.4/mesa3d-24.2.4-release-msvc.7z
        7z x mesa.7z -o*
        powershell.exe mesa\systemwidedeploy.cmd 1
    # build love to use for the tests
    - name: Build Test Exe
      if: steps.vars.outputs.arch != 'ARM64'
      run: cmake --build build --config Release --target install
    # windows opengl tests
    - name: Run Tests (opengl)
      if: steps.vars.outputs.arch != 'ARM64'
      env:
        LOVE_GRAPHICS_DEBUG: 1
      run: |
        echo 'check dir'
        ls
        powershell.exe ./install/lovec.exe ./megasource/libs/love/testing/main.lua --all --isRunner --renderers opengl
    - name: Love Test Report (opengl)
      id: report1
      if: steps.vars.outputs.arch != 'ARM64'
      uses: ellraiser/love-test-report@main
      with:
        name: Love Testsuite Windows ${{ steps.vars.outputs.arch }} (opengl)
        title: test-report-windows-${{ steps.vars.outputs.arch }}-opengl
        path: megasource/libs/love/testing/output/lovetest_all.md
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Zip Test Output (opengl)
      if: steps.vars.outputs.arch != 'ARM64'
      run: |
        7z a -tzip test-output-windows-${{ steps.vars.outputs.arch }}-opengl.zip megasource/libs/love/testing/output/
    - name: Artifact Test Output (opengl)
      if: steps.vars.outputs.arch != 'ARM64'
      uses: actions/upload-artifact@v4
      with:
        name: test-output-windows-${{ steps.vars.outputs.arch }}-opengl-${{ steps.report1.outputs.conclusion }}
        path: test-output-windows-${{ steps.vars.outputs.arch }}-opengl.zip
    # windows opengles tests
    - name: Run Tests (opengles)
      if: steps.vars.outputs.arch != 'ARM64'
      env:
        LOVE_GRAPHICS_DEBUG: 1
        LOVE_GRAPHICS_USE_OPENGLES: 1
      run: |
        powershell.exe ./install/lovec.exe ./megasource/libs/love/testing/main.lua --all --isRunner --renderers opengl
    - name: Love Test Report (opengles)
      id: report2
      if: steps.vars.outputs.arch != 'ARM64'
      uses: ellraiser/love-test-report@main
      with:
        name: Love Testsuite Windows ${{ steps.vars.outputs.arch }} (opengles)
        title: test-report-windows-${{ steps.vars.outputs.arch }}-opengles
        path: megasource/libs/love/testing/output/lovetest_all.md
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Zip Test Output (opengles)
      if: steps.vars.outputs.arch != 'ARM64'
      run: |
        7z a -tzip test-output-windows-${{ steps.vars.outputs.arch }}-opengles.zip megasource/libs/love/testing/output/
    - name: Artifact Test Output (opengles)
      if: steps.vars.outputs.arch != 'ARM64'
      uses: actions/upload-artifact@v4
      with:
        name: test-output-windows-${{ steps.vars.outputs.arch }}-opengles-${{ steps.report2.outputs.conclusion }}
        path: test-output-windows-${{ steps.vars.outputs.arch }}-opengles.zip
    - name: Check Tests Passing
      if: steps.report1.outputs.conclusion == 'failure' || steps.report2.outputs.conclusion == 'failure'
      run: |
        echo "${{ steps.report1.outputs.failed }} opengl tests failed"
        echo "${{ steps.report2.outputs.failed }} opengles tests failed"
        exit 1
